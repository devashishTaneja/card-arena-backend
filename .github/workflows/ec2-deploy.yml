name: "EC2 Deploy"
on:
  push:
    branches:
      - master
  workflow_dispatch: # This line enables the manual run trigger with the "Run workflow" button

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: cardarenabe
  ECR_REGISTRY: 729926669123.dkr.ecr.ap-south-1.amazonaws.com
  IMAGE_TAG: latest
  EC2_USER: ec2-user
  EC2_IP: 51.20.94.108

jobs:
  deploy-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build spring gradle
        run: |
          ./gradlew build
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to EC2
        id: deploy-ec2
        run: |
          echo "${{ secrets.EC2_PEM_FILE }}" | base64 -d > ec2-key.pem
          chmod 600 ec2-key.pem
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_IP "aws ecr get-login-password | sudo docker login --username AWS --password-stdin $ECR_REGISTRY && \
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG && \
            sudo docker-compose -f /home/$EC2_USER/docker-compose.yml restart cardarenabe &&
            sudo docker image prune -af"
